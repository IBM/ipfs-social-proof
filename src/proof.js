const { OBJECT, STRING, UNDEFINED,
        ARRAY, INTEGER, BOOL, FUNCTION } = require('./utils')

class Proof {

  constructor (proofsDB, identity, ipfs, crypto) {
    if (!proofsDB || !identity || !ipfs || !crypto) {
      throw new Error('proofsDB, identity, ipfs, crypto are required')
    }

    this.proofsDB = db
    this.identity = identity
    this.ipfs = ipfs
    this.crypto = crypto
  }

  updateLocalValidityDocs () {
    // `validityDocs` are proofs that the peer profile carries
    // around and broadcasts to peers as p2p discovery happens
    // get all local client proofs and add them to the in-memory _idData
    // fire and forget as needed
    const that = this

    this.proofsDB.getValidityDocs().then((res) => {
      if (res) {
        that.identity.validityDocs = res // TODO create setter in Identity class
      }
    }).catch((ex) => {
      console.error(ex)
    })
  }

  // Move to an 'ipfs' property / module
  async saveProof (content) {
    try {
      var proofData = content
      if (typeof content === OBJECT) {
        proofData = JSON.stringify(content)
      }
      var results = await this.saveProofToIpfs(proofData)
      log('results', results)
    } catch (ex) {
      throw new Error(ex)
    }
    var saveData
    if (typeof proofData === STRING) {
      saveData = JSON.parse(proofData)
    }

    let hash = results[0].hash
    saveData.ipfsHash = hash
    saveData.id = hash

    try {
      const success = await this.proofsDB.create(saveData)
      // TODO: re-generate validityDocs property on the idData object
      this.updateLocalValidityDocs()
      return success
    } catch (ex) {
      console.error(ex)
      throw new Error(ex)
    }
  }

  createProof (username, service, callback, expires=null) {
    // Sign message, returning an Object with
    // service, username, message, handle and signature
    const that = this
    if (!username || !service) {
      throw new Error(ERR.ARG_REQ_USERNAME_SERVICE)
    }
    const ts = Date.now()

    let message = {
      statement: `I am ${username} on ${service}`, // add URL here
      username: username,
      service: service
    }

    let proof = JSON.stringify({
      message: message,
      timestamp: ts,
      expires: expires,
      ipfsId: this.peerId,
      handle: this._idData.handle
    })

    this.crypto.sign(proof, (err, signature) => {
      if (err) { throw new Error(err) }

      let assertion = {
        handle: that._idData.handle,
        ipfsId: that.peerId,
        proof: proof,
        signature: that.dehydrate(signature),
        timestamp: ts,
        publicKey: that.pubKeyDehydrated
      }
      if (callback) {
        callback(err, assertion)
      }
    })
  }

  // TODO: move to 'ipfs' property
  async saveProofToIpfs (content) {
    try {
      let result = await this.store(JSON.stringify(content))
      return result
    } catch (ex) {
      throw new Error(ex)
    }
  }

  // TODO move to a 'crypto' property
  verifyProof (proof, callback) {
    // make sure the proof signature was generated by the private half of publicKey
    // XXX: had to remove all references to this as it was undefined!!!??
    let _proof
    if (typeof proof == STRING) {
      _proof = JSON.parse(proof)
    } else {
      _proof = proof
    }
    if (proof.doc) {
      _proof = proof.doc
    }
    // TODO: revert to using helper functions and test
    //       `this` was undefined here being called from PublicKeyCard
    //        which, BTW, was called from a DOM eventHandler
    const signedProofText = JSON.stringify(_proof.proof) // JSON -> string
    // const bufferSig = this.rehydrate(_proof.signature) //  string -> encode to arraybuffer
    const obj = JSON.parse(_proof.signature)
    // Get the Uint8Array version of the stringified data (key or signature)
    const bufferSig = Buffer.from(obj.data)
    // const publicKey = this.unmarshalPubKey(_proof.publicKey) // Instanciate RsaPubKey
    const objKey = JSON.parse(_proof.publicKey)
    // Get the Uint8Array version of the stringified key
    const bufferKey = Buffer.from(objKey)
    // unmarshal pub key (any pub key)
    const publicKey = libp2pCrypto.keys.unmarshalPublicKey(bufferKey)

    const textArr = t2a(signedProofText) // encode text to array
    // check the signature in the proof
    return publicKey.verify(textArr, bufferSig, callback)
  }

}
